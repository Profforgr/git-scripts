#!/bin/bash

GNATROOT=/opt/gnat/2010

PATH=$GNATROOT/bin:$HOME/bin:$PATH

res=0

REP=/tmp/_$$

while true; do
    if [ -d .git ]; then
	break;
    fi
    cd ..
done

# Repository name
PWD=`pwd`
REPOSIT_NAME=`basename $PWD`

[ "$REPOSIT_NAME" == "" ] && echo No repository found && exit 1;

# Set Style_Checker options

OWEB="-H -cP -cY -l256"

#  The copyright pattern to check
CPYR=""

#  Pathnames matching the regexp will be excluded from the test
EXCLUDE=""

case "$REPOSIT_NAME" in
   v2p) SC_OPTS="-ign out -ign tmplt -ign sed -ign txt \
        -lang Ada -d -cp -cy -sp -gnat05 -lang TXML $OWEB -lang Script -H \
        -lang XML $OWEB -lang HTML $OWEB -lang XSD $OWEB -lang CSS $OWEB"
	;;
   *) SC_OPTS="-ign out -ign tmplt -ign sed -ign txt \
        -lang Ada -H -cP -cY -sp -gnat05 -lang TXML $OWEB \
        -lang XML $OWEB -lang HTML $OWEB -lang XSD $OWEB -lang CSS $OWEB"
	;;
esac

# Source .git-pre-commit hook for user's defined rules

[ -f $HOME/.git-pre-commit ] && source $HOME/.git-pre-commit $REPOSIT_NAME

# Process each file

function check() {
   id=$4
   mode=$(echo $5 | cut -c1)

   ofile=$6

   if [[ "$mode" = "R" ]]; then
       nfile="$7"
   else
       nfile="$6"
   fi

   bfile=$(basename $nfile)

   #  Check if it is a file to ignore

   if [[ -n "$EXCLUDE" && `echo "$nfile" | grep --regexp="$EXCLUDE"` ]]; then
      return 0;
   fi

   #  Skip deleted files as no check to be done

   if [[ "$mode" = "D" ]]; then
       echo $ofile >> $REP/.files.removed
       return 0;
   fi

   #  A renamed file is removed and added

   if [[ "$mode" = "R" ]]; then
       echo $ofile >> $REP/.files.removed
       echo $nfile >> $REP/.files.added
   fi

   git show $id > $REP/$bfile

   #  If the MANIFEST keep it around

   if [[ "$nfile" = "$MANIFEST" ]]; then
       cp $REP/$bfile $REP/.manifest
   fi

   #  If a new file, record it

   if [[ "$mode" == "A" ]]; then
       echo $nfile >> $REP/.files.added
   fi

   ( cd $REP; style_checker $SC_OPTS -n "$nfile" "$bfile"; )
   res=$(($res + $?))
   rm -f $REP/$bfile
}

mkdir $REP

# Get files to be commited
# <N1> <N2> <Id-OLD> <Id-NEW> <status> <Filename>
git diff-index -M --cached HEAD > $REP/.files

while read list
do
   check $list
done < $REP/.files

#  Check for MANIFEST if needed

if [[ -n "$MANIFEST" && -f $REP/.files.added ]]; then
    if [[ ! -f $REP/.manifest ]]; then
	echo ""
	echo Files added, but $MANIFEST not updated, consider adding:
	git diff --cached --name-only --diff-filter=A
	res=1
    else
	while read fadded
	do
	    grep --quiet ^$fadded\$ $REP/.manifest
	    if [[ $? = 1 ]]; then
		echo File $fadded added but missing in $MANIFEST
		res=1
	    fi
	done < $REP/.files.added
    fi
fi

if [[ -n "$MANIFEST" && -f $REP/.files.removed ]]; then
    if [[ ! -f $REP/.manifest ]]; then
	echo ""
	echo Files removed, but $MANIFEST not updated, condider removing:
	git diff --cached --name-only --diff-filter=D
	res=1
    else
	while read fremoved
	do
	    grep --quiet ^$fremoved\$ $REP/.manifest
	    if [[ $? = 0 ]]; then
		echo File $fremoved removed but still in $MANIFEST
		res=1
	    fi
	done < $REP/.files.removed
    fi
fi

rm -fr $REP

exit $res

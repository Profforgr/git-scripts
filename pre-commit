#!/bin/sh

GNATROOT=/opt/gnat/2007

PATH=$GNATROOT/bin:$HOME/bin:$PATH

res=0

REP=/tmp/_$$

while true; do
    if [ -d .git ]; then
	break;
    fi
    cd ..
done

# Repository name
PWD=`pwd`
REPOSIT_NAME=`basename $PWD`

[ "$REPOSIT_NAME" == "" ] && echo No repository found && exit 1;

# Set Style_Checker options

OWEB="-H -cP -cY -l256"

#  The copyright pattern to check
CPYR=""

#  Pathnames matching the regexp will be excluded from the test
EXCLUDE=""

case "$REPOSIT_NAME" in
   gps) CPYR="[[:space:]]Copyright[[:space:]]\(C\)[[:space:]][12]\d\d\d-2\d\d\d,[[:space:]]AdaCore[[:space:]]"
	SC_OPTS="-ign out -ign tmplt -ign sed -ign txt -H \
        -lang XML $OWEB -lang HTML $OWEB -lang XSD $OWEB \
        -lang TXML $OWEB -lang Python -C -L -H \
        -lang CSS $OWEB -lang Ada -d -h18 -cp -cy -sp -gnat05 -cf $CPYR"
        EXCLUDE="\(design/tests\|distrib/\)"
	;;
   xmlada) CPYR="[[:space:]]Copyright[[:space:]]\(C\)[[:space:]]2\d\d\d-2\d\d\d,[[:space:]]AdaCore[[:space:]]"
	SC_OPTS="-lang Ada -d -cp -cy -sp -gnat05 -cf $CPYR"
	;;
   gnat|ASIS) CPYR="[[:space:]]Copyright[[:space:]]\(C\)[[:space:]][12]\d\d\d-2\d\d\d,[[:space:]](AdaCore|Free[[:space:]]Software[[:space:]]Foundation,[[:space:]]Inc.)[[:space:]]"
	SC_OPTS="-L -lang Ada -d -cp -cy -sp -gnat05 -l79 -cf $CPYR"
	;;
   AWS) CPYR="[[:space:]]Copyright[[:space:]]\(C\)[[:space:]][12]\d\d\d-2\d\d\d,[[:space:]]AdaCore[[:space:]]"
	SC_OPTS="-ign out -ign tmplt -ign sed -ign txt \
        -lang TXML $OWEB -lang XML $OWEB -lang HTML $OWEB -lang XSD $OWEB \
        -lang CSS $OWEB -lang Ada -d -cp -cy -sp -gnat05 -cf $CPYR \
	-lang makefile -cp -cy -cf $CPYR -lang Python -H"
        EXCLUDE="\(features\)"
	MANIFEST="MANIFEST"
	;;
   templates_parser) CPYR="[[:space:]]Copyright[[:space:]]\(C\)[[:space:]][12]\d\d\d-2\d\d\d,[[:space:]]AdaCore[[:space:]]"
	SC_OPTS="-ign out -ign tmplt -ign sed -ign txt \
        -lang TXML $OWEB -lang XML $OWEB -lang HTML $OWEB -lang XSD $OWEB \
        -lang CSS $OWEB -lang Ada -d -cp -cy -sp -gnat05 -cf $CPYR"
	;;
   v2p) SC_OPTS="-ign out -ign tmplt -ign sed -ign txt \
        -lang Ada -d -cp -cy -sp -gnat05 -lang TXML $OWEB -lang Script -H \
        -lang XML $OWEB -lang HTML $OWEB -lang XSD $OWEB -lang CSS $OWEB"
	;;
   *) SC_OPTS="-ign out -ign tmplt -ign sed -ign txt \
        -lang Ada -cp -cy -sp -gnat05 -lang TXML $OWEB \
        -lang XML $OWEB -lang HTML $OWEB -lang XSD $OWEB -lang CSS $OWEB"
	;;
esac

# Process each file

function check() {
   id=$4
   file=`basename $6`
   mode=$(echo $5 | cut -c1)

   #  Check if it is a file to ignore

   if [[ -n "$EXCLUDE" && `echo "$6" | grep --regexp="$EXCLUDE"` ]]; then
      return 0;
   fi

   #  skip deleted/renamed files

   if [[ "$mode" = "D" || "$mode" = "R" ]]; then
       echo $6 >> $REP/.files.removed
       return 0;
   fi

   git show $id > $REP/$file

   #  If the MANIFEST keep it around

   if [[ "$6" = "$MANIFEST" ]]; then
       cp $REP/$file $REP/.manifest
   fi

   #  If a new file, record it

   if [[ "$mode" == "A" ]]; then
       echo $6 >> $REP/.files.added
   fi

   ( cd $REP; style_checker $SC_OPTS -n "$6" "$file"; )
   res=$(($res + $?))
   rm -f $REP/$file
}

mkdir $REP

# Get files to be commited
# <N1> <N2> <Id-OLD> <Id-NEW> <status> <Filename>
git diff-index -M --cached HEAD > $REP/.files

while read list
do
   check $list
done < $REP/.files

#  Check for MANIFEST if needed

if [[ -n "$MANIFEST" && -f $REP/.files.added ]]; then
    if [[ ! -f $REP/.manifest ]]; then
	echo ""
	echo Files added, but $MANIFEST not updated, consider adding:
	git diff --cached --name-only --diff-filter=A
	res=1
    else
	while read fadded
	do
	    grep --quiet $fadded $REP/.manifest
	    if [[ $? = 1 ]]; then
		echo File $fadded added but missing in $MANIFEST
		res=1
	    fi
	done < $REP/.files.added
    fi
fi

if [[ -n "$MANIFEST" && -f $REP/.files.removed ]]; then
    if [[ ! -f $REP/.manifest ]]; then
	echo ""
	echo Files removed, but $MANIFEST not updated, condider removing:
	git diff --cached --name-only --diff-filter=D
	res=1
    else
	while read fremoved
	do
	    grep --quiet $fremoved $REP/.manifest
	    if [[ $? = 0 ]]; then
		echo File $fremoved removed but still in $MANIFEST
		res=1
	    fi
	done < $REP/.files.removed
    fi
fi

rm -fr $REP

exit $res

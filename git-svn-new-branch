#! /bin/sh

USAGE='URL [-f|-h|--help|--abort] [branch_name]'
LONG_USAGE='URL is full url to subversion branch
branch_name is the name of the branch to use locally
   (optional, in this case use subversion branch name)
'

OPTIONS_SPEC=


exec_path=$(git --exec-path)
. $exec_path/git-sh-setup
require_work_tree
cd_to_toplevel
set_reflog_action svn-new-branch

# Get require_work_tree from git-rebase--interactive.sh
require_clean_work_tree () {
   # test if working tree is dirty
   git rev-parse --verify HEAD > /dev/null &&
   git update-index --ignore-submodules --refresh &&
   git diff-files --quiet --ignore-submodules &&
   git diff-index --cached --quiet HEAD --ignore-submodules -- ||
   die "Working tree is dirty"
}

abort () {
   require_clean_work_tree
   head=$(grep HEAD .git/SVN_NEW_BRANCH | sed -e "s/HEAD: //")
   branch_name=$(grep BRANCH_NAME .git/SVN_NEW_BRANCH |
      sed -e s"/BRANCH_NAME: //")
   git checkout $head
   git update-ref -d refs/remotes/$branch_name
   git branch -D svn-$branch_name
   find .git -name "*_map*" -print -exec rm -f {} \;
}

get_new_branch () {
   # Verify HEAD
   head=$(git symbolic-ref -q HEAD) ||
   head=$(git rev-parse --verify HEAD) ||
   die "Bad HEAD - I need a HEAD"

   require_clean_work_tree

   rm -f .git/SVN_NEW_BRANCH
   echo HEAD: ${head#refs/heads/} >> .git/SVN_NEW_BRANCH

   URL=$1

   if [[ "$2" == "" ]]; then
       branch_name=$(basename $URL)
   else
       branch_name=$2
   fi

   echo BRANCH_NAME: $branch_name >> .git/SVN_NEW_BRANCH

   echo
   echo Track $URL on $branch_name
   echo Local branch : svn-$branch_name
   echo

   echo Check if local branches exist

   if [[ "$(git branch -r | grep $branch_name)" != "" ]]; then
       echo Remote branch $branch_name already imported.
       exit 1
   fi

   if [[ "$(git branch | grep svn-$branch_name)" != "" ]]; then
       echo Local branch svn-$branch_name already present.
       exit 1
   fi

   echo Check if remote branch exists

   svn list $URL > /dev/null 2>&1

   if [ $? = 1 ]; then
      echo
      echo The given URL does not exists.
      exit 1
   fi

   git config svn-remote.svn-$branch_name.url $URL
   git config svn-remote.svn-$branch_name.fetch :refs/remotes/$branch_name

   echo Fetch branch data
   git svn fetch --no-follow-parent svn-$branch_name
   git branch --track svn-$branch_name $branch_name

   echo Finding branch point
   rsvn=$(svn log --verbose $URL \
       | grep -B0 -A20 -G "A /.*/$branch_name" \
       | grep -E "^r[0-9]+ " | head -1 | cut -d' ' -f1 | cut -c2-)

   echo Subversion branch point: $rsvn

   rgit=$(git svn find-rev r$rsvn)
   # Run it twice to avoid the svn rebuilding .rev_map messages
   rgit=$(git svn find-rev r$rsvn)

   echo Corresponding Git revision: $rgit
   echo

   git log $rgit^..$rgit

   if test $force = 0
   then
      echo
      echo Only branch history has been fetched, consider using filter-branch
      echo to attach the old history to the branch.
      echo
      echo $ git filter-branch -f --tag-name-filter cat \\
      echo "   "--parent-filter \"sed -e 's/^$/-p $rgit/'\" \\
      echo "   svn-$branch_name"
      echo $ git reset --hard svn-$branch_name
      echo $ git update-ref refs/remotes/$branch_name svn-$branch_name
      echo $ find .git -name "*_map*" -print -exec rm -f {} \;
      echo $ git svn rebase
      echo
   else
      (
         git filter-branch -f --tag-name-filter cat \
            --parent-filter "sed -e 's/^$/-p $rgit/'" svn-$branch_name &&
         git reset --hard svn-$branch_name &&
         git update-ref refs/remotes/$branch_name svn-$branch_name &&
         find .git -name "*_map*" -print -exec rm -f {} \; &&
         git svn rebase
      ) || die "Failed ! Use --abort to revert all changes"

      echo Checkout local branch
      git checkout svn-$branch_name
   fi
}

case "$#" in
0)
    usage ;;
*)
    cmd="$1"
    shift
    case "$cmd" in
    -h|*help)
        usage ;;
    *abort)
        abort ;;
    -f|-force)
        force=1 ;
        test "$#" != 0 || usage
        get_new_branch "$@" ;;
    *)
        test "$#" != 0 || usage
        get_new_branch "$@" ;;
    esac
esac
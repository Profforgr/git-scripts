#! /bin/sh

program=$0

prefix="svn-"
USAGE='abort|branch-point|checkout|attach [--dry-run] URL [branch_name]'
LONG_USAGE="   Commands:

      abort        : to abort an import
      branch-point : return branch point svn revision
      checkout     : retrieve a new branch
      attach       : attach previously imported (see above) branch to
                     corresponding branch point.
   Options:

      URL          : the full url to subversion branch
      branch_name  : the name of the remote branch to use
                     (default is the name of the subversion branch)
                     the local branch name is the basename of this name,
                     prefixed with '$prefix'
      --dry-run    : nothing will changed in the local Git repository
      --prefix=name : prefix to apply to the name of the local branch

   A common usage is:

      $ git svn-new-branch checkout svn+ssh://server/svn/branches/relA
      $ git svn-new-branch attach svn+ssh://server/svn/branches/relA

   Before attaching, it is possible to check the branch-point that will be
   used to connect the branch history to the master:

      $ git svn-new-branch branch-point svn+ssh://server/svn/branches/relA
"

OPTIONS_SPEC=

exec_path=$(git --exec-path)
. $exec_path/git-sh-setup
require_work_tree
cd_to_toplevel
set_reflog_action svn-new-branch

# Get require_work_tree from git-rebase--interactive.sh
require_clean_work_tree () {
   # test if working tree is dirty
   git rev-parse --verify HEAD > /dev/null &&
   git update-index --ignore-submodules --refresh &&
   git diff-files --quiet --ignore-submodules &&
   git diff-index --cached --quiet HEAD --ignore-submodules -- ||
   die "Working tree is dirty"
}

parse_command_line () {
   requires_url=${1:-True}
   dryrun=""

   shift  # remove requires_url

   TEMP=`getopt -o dp: --long dry-run,prefix: -n git-svn-new-branch -- "$@"`
   if [ $? != 0 ]; then exit 1; fi
   eval set -- "$TEMP" 

   while true ; do
     case "$1" in
        -d|--dry-run) dryrun=echo;
                      echo "Restart without --dry-run if you want to execute"\
                           "the following commands:"
                      shift;;
        -p|--prefix)  prefix="$2"; shift 2;;
        --) shift; break ;;
        *) exit 1;;
     esac
   done 

   if [ $requires_url = True ]; then
      URL=$1

      if [ "$URL" == "" ]; then
         echo "Missing URL"
         exit 1
      fi

      if [ "$2" = "" ]; then
         branch_name=$(basename $URL)
         local_branch=$prefix$branch_name
      else
         branch_name=$2
         local_branch=$prefix$(basename $branch_name)
      fi

      echo
      echo Track $URL on branch: $branch_name
      echo on local branch : $local_branch
      echo
   fi
}

abort () {
   parse_command_line False "$@"
   require_clean_work_tree
   head=$(grep HEAD .git/SVN_NEW_BRANCH | sed -e "s/HEAD: //")
   branch_name=$(grep BRANCH_NAME .git/SVN_NEW_BRANCH |
      sed -e s"/BRANCH_NAME: //")
   $dryrun git checkout $head
   $dryrun git update-ref -d refs/remotes/$branch_name
   $dryrun find .git -name "*_map*" -print -exec rm -f {} \;
   $dryrun git branch -D $local_branch

}

get_new_branch () {
   # Verify HEAD
   head=$(git symbolic-ref -q HEAD) ||
   head=$(git rev-parse --verify HEAD) ||
   die "Bad HEAD - I need a HEAD"

   require_clean_work_tree

   rm -f .git/SVN_NEW_BRANCH
   echo HEAD: ${head#refs/heads/} >> .git/SVN_NEW_BRANCH

   parse_command_line True "$@"

   echo BRANCH_NAME: $branch_name >> .git/SVN_NEW_BRANCH

   echo Check if local branches exist

   if [ "$(git branch -r | grep $branch_name)" != "" ]; then
       die Remote branch $branch_name already imported.
   fi

   if [ "$(git branch | grep $local_branch)" != "" ]; then
       die Local branch $local_branch already present.
   fi

   echo Check if remote branch exists

   svn list $URL > /dev/null 2>&1

   if [ $? = 1 ]; then
      die The given URL does not exists.
   fi

   if [ "$dryrun" == "" ]; then
      git config svn-remote.$local_branch.url $URL
      git config svn-remote.$local_branch.fetch :refs/remotes/$branch_name

      echo Fetch branch data
      git svn fetch --no-follow-parent $local_branch
      git branch --track $local_branch $branch_name

      echo Only branch history has been fetched, consider using
      echo $program attach --prefix=\"$prefix\" $URL $branch_name
      echo to attach the old history to the branch.
   fi
}

attach_branch () {
   parse_command_line True "$@"

   echo Finding branch point
   rsvn=$(get_branch_point $URL)
   if [ "$rsvn" = "" ]; then
      die "Can not find branch point"
   fi

   echo Subversion branch point: $rsvn

   nrsvn=$(find_nearest_rev $rsvn)

   rgit=$(git svn find-rev r$nrsvn)
   # Run it twice to avoid the svn rebuilding .rev_map messages
   rgit=$(git svn find-rev r$nrsvn)

   if [ "$rgit" = "" ]; then
      echo "Can not find corresponding Git rev !"
      echo "Maybe the subversion repository is set incorrectly, trying different approach"
      rgit=$(find_previous_svn_rev $URL)
      if [ "$rgit" = "" ]; then
         die "Could not find git revision for branch point"
      fi
   fi

   echo Corresponding Git revision: $rgit
   echo

   git log $rgit^..$rgit | cat -

   echo Checkout local branch
   $dryrun git checkout $local_branch
   (
      $dryrun git filter-branch -f --tag-name-filter cat \
         --parent-filter "sed -e 's/^$/-p $rgit/'" $local_branch &&
      $dryrun git reset --hard $local_branch &&
      $dryrun git update-ref refs/remotes/$branch_name $local_branch &&
      $dryrun find .git -name "*_map*" -print -exec rm -f {} \; &&
      $dryrun git svn rebase
   ) || die "Failed ! Use --abort to revert all changes"
}

get_branch_point () {
   branch=$1
   rev=$(svn log --verbose --stop-on-copy $branch | grep '(from' |
      grep -E -o ":([0-9]+)" | cut -c2- | tail -1)
   echo $rev
}

find_previous_svn_rev () {
   branch=$1
   rev_on_branch=$(svn log -q --stop-on-copy $branch | fgrep r | wc -l)

   # "+5" is to give us some more revisions to work with, in case the svn
   # repository is really messed up
   fetch=`expr $rev_on_branch + 5`
   prev=$(svn log -q $branch | fgrep r | head -$fetch | grep -o -E 'r[0-9]+' | cut -c2-)

   for p in $prev; do
      # When the repository is messed up, it seems that "find-rev" will not
      # work correctly either, so try differently
      # rgit=$(git svn find-rev r$p)

      rgit=$(git log | grep -e commit -e git-svn-id | grep "@$p " -B1 | head -1 | cut -f2 -d\  )

      if [ "$rgit" != "" ]; then
         echo $rgit
         return
      else
         echo "No matching git revision for subversion's $p" >/dev/stderr
      fi
   done

   echo "" 
}

find_nearest_rev () {
   rev=$1
   nrev=$(
      (
         echo $rev;
         git svn log --oneline | grep -o -E 'r[0-9]+' | cut -c2-
      ) | sort -n | grep -E "^$rev" -B1 | head -1)
   echo $nrev
}

test "$#" = "0" && usage && exit 1;

case $1 in
   -h|*help)
      usage;;
   *abort)
      shift
      abort "$@";
      exit $?
      ;;
   *branch-point)
      shift
      test "$1" != "" && get_branch_point "$@"
      ;;
   *attach)
      shift
      attach_branch "$@"
      ;;
   *find-nearest-rev)
      shift
      test "$1" != "" && find_nearest_rev "$@"
      ;;
   *checkout)
      shift
      test "$1" != "" && get_new_branch "$@";;
   *)
      echo "Invalid command : $1"
      exit 1;;
esac

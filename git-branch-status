#! /bin/sh

# This script uses git branch and rev-list commands to output changes between
# branches.
#
# $ git rev-list master..topic
#   list all changes made in topic not yet in master
#   This is used to list changes not yet merged in master
#
# $ git rev-list topic..master
#   list all changes made on master not in topic
#   This is used to check if a rebase is needed for a clean fast-forward

# The master branch is master by default
MASTER=
ORIGIN=
REBASE=0
VERBOSE=0
LIST=0
COLOR=1                         # Colorize by default
SHOW_MERGE_BASE_DATE=0

function usage() {
   echo "$0 [-r] [-v] [-l] [--help] [<origin>] [<branchname>]"
   echo ""
   echo "This command will compare all branches on a git repository against"
   echo "the branch given in option (default is master). By default it just"
   echo "output the number of commits not yet merged on <branchname>."
   echo ""
   echo "   -r         : also output the number of commits done"
   echo "                on <branchname> since last merge."
   echo "   -l         : list commits to be merged."
   echo "   -sd        : show split date (merge base)"
   echo "   --no-color : disable color"
   echo "   -v         : verbose mode"
   exit 1
}

function set_colors() {
    ESC_SEQ="\x1b["
    COL_RESET=$ESC_SEQ"39;49;00m"
    COL_RED=$ESC_SEQ"31;01m"
    COL_GREEN=$ESC_SEQ"32;01m"
    COL_YELLOW=$ESC_SEQ"33;01m"
    COL_BLUE=$ESC_SEQ"34;01m"
    COL_MAGENTA=$ESC_SEQ"35;01m"
    COL_CYAN=$ESC_SEQ"36;01m"
}

while :
do
   case "$1" in
      -r)
            REBASE=1
	    ;;
      -v)
            VERBOSE=1
	    ;;
      -l)
            LIST=1
	    ;;
      -sd)
           SHOW_MERGE_BASE_DATE=1
           ;;
      -h|--h|--he|--hel|--help)
            usage
	    ;;
       --no-color)
           COLOR=
           ;;
      "") break
            ;;
      *)
            if [ "$MASTER" = "" ]; then
	       MASTER=$1
            else
                if [ "$ORIGIN" = "" ]; then
                    ORIGIN=$MASTER
                    MASTER=$1
                fi
            fi
	    ;;
   esac
   shift
done

if [ "$MASTER" = "" ]; then
   MASTER=master
fi

if [ "$COLOR" = "1" ]; then
    set_colors;
fi

echo ""
echo Check all branches against $MASTER

if [ ! -f .git/config ]; then
   echo Must be run inside a Git repository
fi;

function check_branch (){
   left=0
   right=0
   branch=$1

   if [ "$SHOW_MERGE_BASE_DATE" = "1" ]; then
       refpoint=$(git merge-base $branch $MASTER)
   else
       refpoint=$(git rev-parse $branch)
   fi

   BOUTPUT=$COL_YELLOW${branch}$COL_BLUE
   BOUTPUT=$BOUTPUT" "$(git log $refpoint -1 --pretty=format:"%ar %s")
   BOUTPUT=$BOUTPUT$COL_RESET"\n"

   REVLIST=""

   if [ "$REBASE" = "1" ]; then
      REVLIST=$(git rev-list --pretty=oneline $branch..$MASTER)
      if [ "$REVLIST" != "" ]; then
         left=1
         n=$(echo -e "$REVLIST" | wc -l)
         BOUTPUT="$BOUTPUT\t$COL_RED$n$COL_RESET commit(s) away"
      else
         if [ "$VERBOSE" = "1" ]; then
            BOUTPUT="$BOUTPUT, no rebase required"
         fi
      fi
   fi

   REVLIST=$(git rev-list --pretty=oneline $MASTER..$branch)
   if [ "$REVLIST" != "" ]; then
      right=1
      n=$(echo -e "$REVLIST" | wc -l)
      BOUTPUT="$BOUTPUT\t$COL_RED$n$COL_RESET merge(s) waiting"
      if [ "$LIST" = "1" ]; then
         BOUTPUT="$BOUTPUT\n$REVLIST"
      fi
   else
      if [ "$VERBOSE" = "1" ]; then
         BOUTPUT=", nothing to merge"
      fi
   fi

   if [ "$BOUTPUT" != "$branch" ]; then
      case "$left$right" in
         "10") echo -n " -> "
            ;;
         "01") echo -n "<-  "
            ;;
         "11") echo -n "<-> "
           ;;
      esac
      echo -e $BOUTPUT$COL_RESET
      echo
   fi
}

if [ "$ORIGIN" != "" ]; then
   check_branch $ORIGIN
else
    # List all branched, removes the star and skip the master branch

    git branch | sed 's,*,,g' | grep -v $MASTER | while read entry
    do
        check_branch $entry
    done
fi

